"Set numbers
set wrap
set number
set relativenumber
set nocompatible

call plug#begin()

Plug 'Valloric/YouCompleteMe', { 'commit':'d98f896'}

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

Plug 'turbio/bracey.vim', {'do': 'npm install --prefix server'}

Plug 'ervandew/supertab'

Plug 'honza/vim-snippets'

Plug 'scrooloose/syntastic'

Plug 'sirver/ultisnips'
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

Plug 'lervag/vimtex'
    let g:tex_flavor='latex'
    let g:vimtex_view_method='zathura'
    let g:vimtex_quickfix_mode=0

Plug 'KeitaNakamura/tex-conceal.vim'
    set conceallevel=1
    let g:tex_conceal='abdmg'
    hi Conceal ctermbg=none

setlocal spell
set spelllang=en_us
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

call plug#end()

let g:ycm_complete_in_comments = 1 
let g:ycm_seed_identifiers_with_syntax = 1 
let g:ycm_collect_identifiers_from_comments_and_strings = 1 

" let g:UltiSnipsSnippetsDir = "~/.vim/bundle/ultisnips/UltiSnips"

"Colorscheme stuff
syntax enable
set background=dark
colorscheme solarized8_high

map <C-n> :NERDTreeToggle<CR>

" Transparency stuff
hi Normal guibg=NONE ctermbg=NONE
highlight clear LineNr
highlight clear SignColumn

cmap w!! %!sudo tee > /dev/null

"Remap Esc to kj
inoremap kj <Esc>

nnoremap <leader>ac :cd %:p:h <CR> :! javac %:t<CR> :! java %:t:r<CR>

" Edit and source .vimrc  
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
noremap <Leader>s :update<CR>
"autocmd FileType tex nmap <buffer> <C-T> :!latexmk -pvc -pdf %<CR>

filetype plugin indent on 
" Show existing tab with 2 spaces width
set tabstop=2
set softtabstop=2
" When indenting with '>', use 2 spaces width
set shiftwidth=2
" On pressing tab, insert 2 spaces
set expandtab

"Syntatstic stuff:
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:AutoPairsShortcutFastWrap=''
silent! iunmap å
silent! iunmap ä
silent! iunmap ö

function! ToggleSyntastic()
    for i in range(1, winnr('$'))
        let bnum = winbufnr(i)
        if getbufvar(bnum, '&buftype') == 'quickfix'
            lclose
            return
        endif
    endfor
    SyntasticCheck
endfunction

nnoremap <F8> :call ToggleSyntastic()<CR>

map <Space> <Leader>
nnoremap <SPACE> <Nop>
set nospell
